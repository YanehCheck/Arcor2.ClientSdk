/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Names of the robot features must match names of the methods.
    /// </summary>
    [DataContract(Name = "RobotFeatures")]
    public partial class RobotFeatures : IEquatable<RobotFeatures>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotFeatures" /> class.
        /// </summary>
        /// <param name="moveToPose">moveToPose (default to false).</param>
        /// <param name="moveToJoints">moveToJoints (default to false).</param>
        /// <param name="stop">stop (default to false).</param>
        /// <param name="forwardKinematics">forwardKinematics (default to false).</param>
        /// <param name="inverseKinematics">inverseKinematics (default to false).</param>
        /// <param name="handTeaching">handTeaching (default to false).</param>
        public RobotFeatures(bool moveToPose = false, bool moveToJoints = false, bool stop = false, bool forwardKinematics = false, bool inverseKinematics = false, bool handTeaching = false)
        {
            MoveToPose = moveToPose;
            MoveToJoints = moveToJoints;
            Stop = stop;
            ForwardKinematics = forwardKinematics;
            InverseKinematics = inverseKinematics;
            HandTeaching = handTeaching;
        }

        /// <summary>
        /// Gets or Sets MoveToPose
        /// </summary>
        [DataMember(Name = "move_to_pose", EmitDefaultValue = true)]
        public bool MoveToPose { get; set; }

        /// <summary>
        /// Gets or Sets MoveToJoints
        /// </summary>
        [DataMember(Name = "move_to_joints", EmitDefaultValue = true)]
        public bool MoveToJoints { get; set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [DataMember(Name = "stop", EmitDefaultValue = true)]
        public bool Stop { get; set; }

        /// <summary>
        /// Gets or Sets ForwardKinematics
        /// </summary>
        [DataMember(Name = "forward_kinematics", EmitDefaultValue = true)]
        public bool ForwardKinematics { get; set; }

        /// <summary>
        /// Gets or Sets InverseKinematics
        /// </summary>
        [DataMember(Name = "inverse_kinematics", EmitDefaultValue = true)]
        public bool InverseKinematics { get; set; }

        /// <summary>
        /// Gets or Sets HandTeaching
        /// </summary>
        [DataMember(Name = "hand_teaching", EmitDefaultValue = true)]
        public bool HandTeaching { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobotFeatures {\n");
            sb.Append("  MoveToPose: ").Append(MoveToPose).Append("\n");
            sb.Append("  MoveToJoints: ").Append(MoveToJoints).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  ForwardKinematics: ").Append(ForwardKinematics).Append("\n");
            sb.Append("  InverseKinematics: ").Append(InverseKinematics).Append("\n");
            sb.Append("  HandTeaching: ").Append(HandTeaching).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RobotFeatures);
        }

        /// <summary>
        /// Returns true if RobotFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of RobotFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RobotFeatures input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    MoveToPose == input.MoveToPose ||
                    MoveToPose.Equals(input.MoveToPose)
                ) && 
                (
                    MoveToJoints == input.MoveToJoints ||
                    MoveToJoints.Equals(input.MoveToJoints)
                ) && 
                (
                    Stop == input.Stop ||
                    Stop.Equals(input.Stop)
                ) && 
                (
                    ForwardKinematics == input.ForwardKinematics ||
                    ForwardKinematics.Equals(input.ForwardKinematics)
                ) && 
                (
                    InverseKinematics == input.InverseKinematics ||
                    InverseKinematics.Equals(input.InverseKinematics)
                ) && 
                (
                    HandTeaching == input.HandTeaching ||
                    HandTeaching.Equals(input.HandTeaching)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + MoveToPose.GetHashCode();
                hashCode = hashCode * 59 + MoveToJoints.GetHashCode();
                hashCode = hashCode * 59 + Stop.GetHashCode();
                hashCode = hashCode * 59 + ForwardKinematics.GetHashCode();
                hashCode = hashCode * 59 + InverseKinematics.GetHashCode();
                hashCode = hashCode * 59 + HandTeaching.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
