/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Data(what: arcor2_arserver_data.events.common.ShowMainScreen.Data.WhatEnum, highlight: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "ShowMainScreenData")]
    public partial class ShowMainScreenData : IEquatable<ShowMainScreenData>, IValidatableObject
    {
        /// <summary>
        /// Defines What
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhatEnum
        {
            /// <summary>
            /// Enum ScenesList for value: ScenesList
            /// </summary>
            [EnumMember(Value = "ScenesList")]
            ScenesList = 1,

            /// <summary>
            /// Enum ProjectsList for value: ProjectsList
            /// </summary>
            [EnumMember(Value = "ProjectsList")]
            ProjectsList = 2,

            /// <summary>
            /// Enum PackagesList for value: PackagesList
            /// </summary>
            [EnumMember(Value = "PackagesList")]
            PackagesList = 3
        }


        /// <summary>
        /// Gets or Sets What
        /// </summary>
        [DataMember(Name = "what", IsRequired = true, EmitDefaultValue = true)]
        public WhatEnum What { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowMainScreenData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowMainScreenData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowMainScreenData" /> class.
        /// </summary>
        /// <param name="what">what (required).</param>
        /// <param name="highlight">highlight.</param>
        public ShowMainScreenData(WhatEnum what = default(WhatEnum), string highlight = default(string))
        {
            this.What = what;
            this.Highlight = highlight;
        }

        /// <summary>
        /// Gets or Sets Highlight
        /// </summary>
        [DataMember(Name = "highlight", EmitDefaultValue = false)]
        public string Highlight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowMainScreenData {\n");
            sb.Append("  What: ").Append(What).Append("\n");
            sb.Append("  Highlight: ").Append(Highlight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowMainScreenData);
        }

        /// <summary>
        /// Returns true if ShowMainScreenData instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowMainScreenData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowMainScreenData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.What == input.What ||
                    this.What.Equals(input.What)
                ) && 
                (
                    this.Highlight == input.Highlight ||
                    (this.Highlight != null &&
                    this.Highlight.Equals(input.Highlight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.What.GetHashCode();
                if (this.Highlight != null)
                {
                    hashCode = (hashCode * 59) + this.Highlight.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
