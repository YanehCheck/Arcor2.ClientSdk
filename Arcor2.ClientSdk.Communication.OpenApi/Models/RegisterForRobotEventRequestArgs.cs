/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(robot_id: str, what: arcor2_arserver_data.rpc.robot.RegisterForRobotEvent.Request.Args.RegisterEnum, send: bool)
    /// </summary>
    [DataContract(Name = "RegisterForRobotEventRequestArgs")]
    public partial class RegisterForRobotEventRequestArgs : IEquatable<RegisterForRobotEventRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Defines What
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhatEnum
        {
            /// <summary>
            /// Enum EefPose for value: eef_pose
            /// </summary>
            [EnumMember(Value = "eef_pose")]
            EefPose = 1,

            /// <summary>
            /// Enum Joints for value: joints
            /// </summary>
            [EnumMember(Value = "joints")]
            Joints = 2
        }


        /// <summary>
        /// Gets or Sets What
        /// </summary>
        [DataMember(Name = "what", IsRequired = true, EmitDefaultValue = true)]
        public WhatEnum What { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterForRobotEventRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected RegisterForRobotEventRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterForRobotEventRequestArgs" /> class.
        /// </summary>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="what">what (required).</param>
        /// <param name="send">send (required).</param>
        public RegisterForRobotEventRequestArgs(string robotId = default, WhatEnum what = default, bool send = default)
        {
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for RegisterForRobotEventRequestArgs and cannot be null");
            }
            RobotId = robotId;
            What = what;
            Send = send;
        }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets Send
        /// </summary>
        [DataMember(Name = "send", IsRequired = true, EmitDefaultValue = true)]
        public bool Send { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegisterForRobotEventRequestArgs {\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  What: ").Append(What).Append("\n");
            sb.Append("  Send: ").Append(Send).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RegisterForRobotEventRequestArgs);
        }

        /// <summary>
        /// Returns true if RegisterForRobotEventRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterForRobotEventRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterForRobotEventRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    RobotId == input.RobotId ||
                    (RobotId != null &&
                    RobotId.Equals(input.RobotId))
                ) && 
                (
                    What == input.What ||
                    What.Equals(input.What)
                ) && 
                (
                    Send == input.Send ||
                    Send.Equals(input.Send)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (RobotId != null)
                {
                    hashCode = hashCode * 59 + RobotId.GetHashCode();
                }
                hashCode = hashCode * 59 + What.GetHashCode();
                hashCode = hashCode * 59 + Send.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
