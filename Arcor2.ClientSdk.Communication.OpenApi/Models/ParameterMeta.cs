/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ParameterMeta(name: str, type: str, dynamic_value: bool &#x3D; False, dynamic_value_parents: Optional[set[str]] &#x3D; None, description: Optional[str] &#x3D; None, default_value: Optional[str] &#x3D; None, extra: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "ParameterMeta")]
    public partial class ParameterMeta : IEquatable<ParameterMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterMeta" /> class.
        /// </summary>
        [JsonConstructor]
        protected ParameterMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterMeta" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="dynamicValue">dynamicValue (default to false).</param>
        /// <param name="dynamicValueParents">dynamicValueParents.</param>
        /// <param name="description">description.</param>
        /// <param name="defaultValue">defaultValue.</param>
        /// <param name="extra">extra.</param>
        public ParameterMeta(string name = default, string type = default, bool dynamicValue = false, List<string> dynamicValueParents = default, string description = default, string defaultValue = default, string extra = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ParameterMeta and cannot be null");
            }
            Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ParameterMeta and cannot be null");
            }
            Type = type;
            DynamicValue = dynamicValue;
            DynamicValueParents = dynamicValueParents;
            Description = description;
            DefaultValue = defaultValue;
            Extra = extra;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets DynamicValue
        /// </summary>
        [DataMember(Name = "dynamic_value", EmitDefaultValue = true)]
        public bool DynamicValue { get; set; }

        /// <summary>
        /// Gets or Sets DynamicValueParents
        /// </summary>
        [DataMember(Name = "dynamic_value_parents", EmitDefaultValue = false)]
        public List<string> DynamicValueParents { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DefaultValue
        /// </summary>
        [DataMember(Name = "default_value", EmitDefaultValue = false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// Gets or Sets Extra
        /// </summary>
        [DataMember(Name = "extra", EmitDefaultValue = false)]
        public string Extra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParameterMeta {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DynamicValue: ").Append(DynamicValue).Append("\n");
            sb.Append("  DynamicValueParents: ").Append(DynamicValueParents).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ParameterMeta);
        }

        /// <summary>
        /// Returns true if ParameterMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    DynamicValue == input.DynamicValue ||
                    DynamicValue.Equals(input.DynamicValue)
                ) && 
                (
                    DynamicValueParents == input.DynamicValueParents ||
                    (DynamicValueParents != null &&
                     input.DynamicValueParents != null &&
                     DynamicValueParents.SequenceEqual(input.DynamicValueParents))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    DefaultValue == input.DefaultValue ||
                    (DefaultValue != null &&
                    DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    Extra == input.Extra ||
                    (Extra != null &&
                    Extra.Equals(input.Extra))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }
                hashCode = hashCode * 59 + DynamicValue.GetHashCode();
                if (DynamicValueParents != null)
                {
                    hashCode = hashCode * 59 + DynamicValueParents.GetHashCode();
                }
                if (Description != null)
                {
                    hashCode = hashCode * 59 + Description.GetHashCode();
                }
                if (DefaultValue != null)
                {
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                }
                if (Extra != null)
                {
                    hashCode = hashCode * 59 + Extra.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
