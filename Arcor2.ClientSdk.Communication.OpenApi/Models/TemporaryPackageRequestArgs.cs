/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(start_paused: bool &#x3D; False, breakpoints: Optional[set[str]] &#x3D; None)
    /// </summary>
    [DataContract(Name = "TemporaryPackageRequestArgs")]
    public partial class TemporaryPackageRequestArgs : IEquatable<TemporaryPackageRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TemporaryPackageRequestArgs" /> class.
        /// </summary>
        /// <param name="startPaused">startPaused (default to false).</param>
        /// <param name="breakpoints">breakpoints.</param>
        public TemporaryPackageRequestArgs(bool startPaused = false, List<string> breakpoints = default(List<string>))
        {
            this.StartPaused = startPaused;
            this.Breakpoints = breakpoints;
        }

        /// <summary>
        /// Gets or Sets StartPaused
        /// </summary>
        [DataMember(Name = "start_paused", EmitDefaultValue = true)]
        public bool StartPaused { get; set; }

        /// <summary>
        /// Gets or Sets Breakpoints
        /// </summary>
        [DataMember(Name = "breakpoints", EmitDefaultValue = false)]
        public List<string> Breakpoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TemporaryPackageRequestArgs {\n");
            sb.Append("  StartPaused: ").Append(StartPaused).Append("\n");
            sb.Append("  Breakpoints: ").Append(Breakpoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TemporaryPackageRequestArgs);
        }

        /// <summary>
        /// Returns true if TemporaryPackageRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of TemporaryPackageRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TemporaryPackageRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartPaused == input.StartPaused ||
                    this.StartPaused.Equals(input.StartPaused)
                ) && 
                (
                    this.Breakpoints == input.Breakpoints ||
                    this.Breakpoints != null &&
                    input.Breakpoints != null &&
                    this.Breakpoints.SequenceEqual(input.Breakpoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.StartPaused.GetHashCode();
                if (this.Breakpoints != null)
                {
                    hashCode = (hashCode * 59) + this.Breakpoints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
