/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Data(move_event_type: arcor2_arserver_data.events.robot.RobotMoveToData.MoveEventType, robot_id: str, joints_id: str, safe: bool, message: Optional[str] &#x3D; None, arm_id: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "RobotMoveToActionPointJointsData")]
    public partial class RobotMoveToActionPointJointsData : IEquatable<RobotMoveToActionPointJointsData>, IValidatableObject
    {
        /// <summary>
        /// Defines MoveEventType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MoveEventTypeEnum
        {
            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 1,

            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 2,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 3
        }


        /// <summary>
        /// Gets or Sets MoveEventType
        /// </summary>
        [DataMember(Name = "move_event_type", IsRequired = true, EmitDefaultValue = true)]
        public MoveEventTypeEnum MoveEventType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotMoveToActionPointJointsData" /> class.
        /// </summary>
        [JsonConstructor]
        protected RobotMoveToActionPointJointsData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotMoveToActionPointJointsData" /> class.
        /// </summary>
        /// <param name="moveEventType">moveEventType (required).</param>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="jointsId">jointsId (required).</param>
        /// <param name="safe">safe (required).</param>
        /// <param name="message">message.</param>
        /// <param name="armId">armId.</param>
        public RobotMoveToActionPointJointsData(MoveEventTypeEnum moveEventType = default, string robotId = default, string jointsId = default, bool safe = default, string message = default, string armId = default)
        {
            MoveEventType = moveEventType;
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for RobotMoveToActionPointJointsData and cannot be null");
            }
            RobotId = robotId;
            // to ensure "jointsId" is required (not null)
            if (jointsId == null)
            {
                throw new ArgumentNullException("jointsId is a required property for RobotMoveToActionPointJointsData and cannot be null");
            }
            JointsId = jointsId;
            Safe = safe;
            Message = message;
            ArmId = armId;
        }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets JointsId
        /// </summary>
        [DataMember(Name = "joints_id", IsRequired = true, EmitDefaultValue = true)]
        public string JointsId { get; set; }

        /// <summary>
        /// Gets or Sets Safe
        /// </summary>
        [DataMember(Name = "safe", IsRequired = true, EmitDefaultValue = true)]
        public bool Safe { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets ArmId
        /// </summary>
        [DataMember(Name = "arm_id", EmitDefaultValue = false)]
        public string ArmId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobotMoveToActionPointJointsData {\n");
            sb.Append("  MoveEventType: ").Append(MoveEventType).Append("\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  JointsId: ").Append(JointsId).Append("\n");
            sb.Append("  Safe: ").Append(Safe).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ArmId: ").Append(ArmId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RobotMoveToActionPointJointsData);
        }

        /// <summary>
        /// Returns true if RobotMoveToActionPointJointsData instances are equal
        /// </summary>
        /// <param name="input">Instance of RobotMoveToActionPointJointsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RobotMoveToActionPointJointsData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    MoveEventType == input.MoveEventType ||
                    MoveEventType.Equals(input.MoveEventType)
                ) && 
                (
                    RobotId == input.RobotId ||
                    (RobotId != null &&
                    RobotId.Equals(input.RobotId))
                ) && 
                (
                    JointsId == input.JointsId ||
                    (JointsId != null &&
                    JointsId.Equals(input.JointsId))
                ) && 
                (
                    Safe == input.Safe ||
                    Safe.Equals(input.Safe)
                ) && 
                (
                    Message == input.Message ||
                    (Message != null &&
                    Message.Equals(input.Message))
                ) && 
                (
                    ArmId == input.ArmId ||
                    (ArmId != null &&
                    ArmId.Equals(input.ArmId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + MoveEventType.GetHashCode();
                if (RobotId != null)
                {
                    hashCode = hashCode * 59 + RobotId.GetHashCode();
                }
                if (JointsId != null)
                {
                    hashCode = hashCode * 59 + JointsId.GetHashCode();
                }
                hashCode = hashCode * 59 + Safe.GetHashCode();
                if (Message != null)
                {
                    hashCode = hashCode * 59 + Message.GetHashCode();
                }
                if (ArmId != null)
                {
                    hashCode = hashCode * 59 + ArmId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
