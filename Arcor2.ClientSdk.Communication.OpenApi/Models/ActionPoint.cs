/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ActionPoint(name: &#39;str&#39;, position: &#39;Position&#39;, parent: &#39;Optional[str]&#39; &#x3D; None, display_name: &#39;Optional[str]&#39; &#x3D; None, description: &#39;Optional[str]&#39; &#x3D; None, id: &#39;str&#39; &#x3D; &#39;&#39;, orientations: &#39;list[NamedOrientation]&#39; &#x3D; &lt;factory&gt;, robot_joints: &#39;list[ProjectRobotJoints]&#39; &#x3D; &lt;factory&gt;, actions: &#39;list[Action]&#39; &#x3D; &lt;factory&gt;)
    /// </summary>
    [DataContract(Name = "ActionPoint")]
    public partial class ActionPoint : IEquatable<ActionPoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionPoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActionPoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionPoint" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="position">position (required).</param>
        /// <param name="parent">parent.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="description">description.</param>
        /// <param name="id">id (default to &quot;&quot;).</param>
        /// <param name="orientations">orientations.</param>
        /// <param name="robotJoints">robotJoints.</param>
        /// <param name="actions">actions.</param>
        public ActionPoint(string name = default(string), Position position = default(Position), string parent = default(string), string displayName = default(string), string description = default(string), string id = @"", List<NamedOrientation> orientations = default(List<NamedOrientation>), List<ProjectRobotJoints> robotJoints = default(List<ProjectRobotJoints>), List<Action> actions = default(List<Action>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ActionPoint and cannot be null");
            }
            this.Name = name;
            // to ensure "position" is required (not null)
            if (position == null)
            {
                throw new ArgumentNullException("position is a required property for ActionPoint and cannot be null");
            }
            this.Position = position;
            this.Parent = parent;
            this.DisplayName = displayName;
            this.Description = description;
            // use default value if no "id" provided
            this.Id = id ?? @"";
            this.Orientations = orientations;
            this.RobotJoints = robotJoints;
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", IsRequired = true, EmitDefaultValue = true)]
        public Position Position { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name = "parent", EmitDefaultValue = false)]
        public string Parent { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Orientations
        /// </summary>
        [DataMember(Name = "orientations", EmitDefaultValue = false)]
        public List<NamedOrientation> Orientations { get; set; }

        /// <summary>
        /// Gets or Sets RobotJoints
        /// </summary>
        [DataMember(Name = "robot_joints", EmitDefaultValue = false)]
        public List<ProjectRobotJoints> RobotJoints { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionPoint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Orientations: ").Append(Orientations).Append("\n");
            sb.Append("  RobotJoints: ").Append(RobotJoints).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionPoint);
        }

        /// <summary>
        /// Returns true if ActionPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionPoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Position == input.Position ||
                    (this.Position != null &&
                    this.Position.Equals(input.Position))
                ) && 
                (
                    this.Parent == input.Parent ||
                    (this.Parent != null &&
                    this.Parent.Equals(input.Parent))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Orientations == input.Orientations ||
                    this.Orientations != null &&
                    input.Orientations != null &&
                    this.Orientations.SequenceEqual(input.Orientations)
                ) && 
                (
                    this.RobotJoints == input.RobotJoints ||
                    this.RobotJoints != null &&
                    input.RobotJoints != null &&
                    this.RobotJoints.SequenceEqual(input.RobotJoints)
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Position != null)
                {
                    hashCode = (hashCode * 59) + this.Position.GetHashCode();
                }
                if (this.Parent != null)
                {
                    hashCode = (hashCode * 59) + this.Parent.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Orientations != null)
                {
                    hashCode = (hashCode * 59) + this.Orientations.GetHashCode();
                }
                if (this.RobotJoints != null)
                {
                    hashCode = (hashCode * 59) + this.RobotJoints.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
