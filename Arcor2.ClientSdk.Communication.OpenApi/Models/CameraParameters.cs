/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// CameraParameters(fx: float, fy: float, cx: float, cy: float, dist_coefs: list[float])
    /// </summary>
    [DataContract(Name = "CameraParameters")]
    public partial class CameraParameters : IEquatable<CameraParameters>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CameraParameters" /> class.
        /// </summary>
        [JsonConstructor]
        protected CameraParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CameraParameters" /> class.
        /// </summary>
        /// <param name="fx">fx (required).</param>
        /// <param name="fy">fy (required).</param>
        /// <param name="cx">cx (required).</param>
        /// <param name="cy">cy (required).</param>
        /// <param name="distCoefs">distCoefs (required).</param>
        public CameraParameters(decimal fx = default, decimal fy = default, decimal cx = default, decimal cy = default, List<decimal> distCoefs = default)
        {
            Fx = fx;
            Fy = fy;
            Cx = cx;
            Cy = cy;
            // to ensure "distCoefs" is required (not null)
            if (distCoefs == null)
            {
                throw new ArgumentNullException("distCoefs is a required property for CameraParameters and cannot be null");
            }
            DistCoefs = distCoefs;
        }

        /// <summary>
        /// Gets or Sets Fx
        /// </summary>
        [DataMember(Name = "fx", IsRequired = true, EmitDefaultValue = true)]
        public decimal Fx { get; set; }

        /// <summary>
        /// Gets or Sets Fy
        /// </summary>
        [DataMember(Name = "fy", IsRequired = true, EmitDefaultValue = true)]
        public decimal Fy { get; set; }

        /// <summary>
        /// Gets or Sets Cx
        /// </summary>
        [DataMember(Name = "cx", IsRequired = true, EmitDefaultValue = true)]
        public decimal Cx { get; set; }

        /// <summary>
        /// Gets or Sets Cy
        /// </summary>
        [DataMember(Name = "cy", IsRequired = true, EmitDefaultValue = true)]
        public decimal Cy { get; set; }

        /// <summary>
        /// Gets or Sets DistCoefs
        /// </summary>
        [DataMember(Name = "dist_coefs", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> DistCoefs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CameraParameters {\n");
            sb.Append("  Fx: ").Append(Fx).Append("\n");
            sb.Append("  Fy: ").Append(Fy).Append("\n");
            sb.Append("  Cx: ").Append(Cx).Append("\n");
            sb.Append("  Cy: ").Append(Cy).Append("\n");
            sb.Append("  DistCoefs: ").Append(DistCoefs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as CameraParameters);
        }

        /// <summary>
        /// Returns true if CameraParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of CameraParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CameraParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Fx == input.Fx ||
                    Fx.Equals(input.Fx)
                ) && 
                (
                    Fy == input.Fy ||
                    Fy.Equals(input.Fy)
                ) && 
                (
                    Cx == input.Cx ||
                    Cx.Equals(input.Cx)
                ) && 
                (
                    Cy == input.Cy ||
                    Cy.Equals(input.Cy)
                ) && 
                (
                    DistCoefs == input.DistCoefs ||
                    (DistCoefs != null &&
                     input.DistCoefs != null &&
                     DistCoefs.SequenceEqual(input.DistCoefs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + Fx.GetHashCode();
                hashCode = hashCode * 59 + Fy.GetHashCode();
                hashCode = hashCode * 59 + Cx.GetHashCode();
                hashCode = hashCode * 59 + Cy.GetHashCode();
                if (DistCoefs != null)
                {
                    hashCode = hashCode * 59 + DistCoefs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
