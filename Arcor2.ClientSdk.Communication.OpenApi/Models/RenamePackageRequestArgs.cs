/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(package_id: str, new_name: str)
    /// </summary>
    [DataContract(Name = "RenamePackageRequestArgs")]
    public partial class RenamePackageRequestArgs : IEquatable<RenamePackageRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RenamePackageRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected RenamePackageRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RenamePackageRequestArgs" /> class.
        /// </summary>
        /// <param name="packageId">packageId (required).</param>
        /// <param name="newName">newName (required).</param>
        public RenamePackageRequestArgs(string packageId = default, string newName = default)
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new ArgumentNullException("packageId is a required property for RenamePackageRequestArgs and cannot be null");
            }
            PackageId = packageId;
            // to ensure "newName" is required (not null)
            if (newName == null)
            {
                throw new ArgumentNullException("newName is a required property for RenamePackageRequestArgs and cannot be null");
            }
            NewName = newName;
        }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "package_id", IsRequired = true, EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets NewName
        /// </summary>
        [DataMember(Name = "new_name", IsRequired = true, EmitDefaultValue = true)]
        public string NewName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RenamePackageRequestArgs {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RenamePackageRequestArgs);
        }

        /// <summary>
        /// Returns true if RenamePackageRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of RenamePackageRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RenamePackageRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    PackageId == input.PackageId ||
                    (PackageId != null &&
                    PackageId.Equals(input.PackageId))
                ) && 
                (
                    NewName == input.NewName ||
                    (NewName != null &&
                    NewName.Equals(input.NewName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (PackageId != null)
                {
                    hashCode = hashCode * 59 + PackageId.GetHashCode();
                }
                if (NewName != null)
                {
                    hashCode = hashCode * 59 + NewName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
