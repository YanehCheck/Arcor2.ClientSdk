/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(point_idx: int)
    /// </summary>
    [DataContract(Name = "ObjectAimingAddPointRequestArgs")]
    public partial class ObjectAimingAddPointRequestArgs : IEquatable<ObjectAimingAddPointRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectAimingAddPointRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ObjectAimingAddPointRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectAimingAddPointRequestArgs" /> class.
        /// </summary>
        /// <param name="pointIdx">pointIdx (required).</param>
        public ObjectAimingAddPointRequestArgs(int pointIdx = default(int))
        {
            this.PointIdx = pointIdx;
        }

        /// <summary>
        /// Gets or Sets PointIdx
        /// </summary>
        [DataMember(Name = "point_idx", IsRequired = true, EmitDefaultValue = true)]
        public int PointIdx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectAimingAddPointRequestArgs {\n");
            sb.Append("  PointIdx: ").Append(PointIdx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectAimingAddPointRequestArgs);
        }

        /// <summary>
        /// Returns true if ObjectAimingAddPointRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectAimingAddPointRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectAimingAddPointRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PointIdx == input.PointIdx ||
                    this.PointIdx.Equals(input.PointIdx)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PointIdx.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
