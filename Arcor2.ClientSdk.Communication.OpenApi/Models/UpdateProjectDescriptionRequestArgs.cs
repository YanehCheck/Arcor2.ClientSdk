/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(project_id: str, new_description: str)
    /// </summary>
    [DataContract(Name = "UpdateProjectDescriptionRequestArgs")]
    public partial class UpdateProjectDescriptionRequestArgs : IEquatable<UpdateProjectDescriptionRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProjectDescriptionRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateProjectDescriptionRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateProjectDescriptionRequestArgs" /> class.
        /// </summary>
        /// <param name="projectId">projectId (required).</param>
        /// <param name="newDescription">newDescription (required).</param>
        public UpdateProjectDescriptionRequestArgs(string projectId = default(string), string newDescription = default(string))
        {
            // to ensure "projectId" is required (not null)
            if (projectId == null)
            {
                throw new ArgumentNullException("projectId is a required property for UpdateProjectDescriptionRequestArgs and cannot be null");
            }
            this.ProjectId = projectId;
            // to ensure "newDescription" is required (not null)
            if (newDescription == null)
            {
                throw new ArgumentNullException("newDescription is a required property for UpdateProjectDescriptionRequestArgs and cannot be null");
            }
            this.NewDescription = newDescription;
        }

        /// <summary>
        /// Gets or Sets ProjectId
        /// </summary>
        [DataMember(Name = "project_id", IsRequired = true, EmitDefaultValue = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets NewDescription
        /// </summary>
        [DataMember(Name = "new_description", IsRequired = true, EmitDefaultValue = true)]
        public string NewDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateProjectDescriptionRequestArgs {\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  NewDescription: ").Append(NewDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateProjectDescriptionRequestArgs);
        }

        /// <summary>
        /// Returns true if UpdateProjectDescriptionRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateProjectDescriptionRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateProjectDescriptionRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                ) && 
                (
                    this.NewDescription == input.NewDescription ||
                    (this.NewDescription != null &&
                    this.NewDescription.Equals(input.NewDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ProjectId.GetHashCode();
                }
                if (this.NewDescription != null)
                {
                    hashCode = (hashCode * 59) + this.NewDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
