/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// PackageMeta(name: str, built: datetime.datetime, executed: Optional[datetime.datetime] &#x3D; None)
    /// </summary>
    [DataContract(Name = "PackageMeta")]
    public partial class PackageMeta : IEquatable<PackageMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageMeta" /> class.
        /// </summary>
        [JsonConstructor]
        protected PackageMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageMeta" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="built">built (required).</param>
        /// <param name="executed">executed.</param>
        public PackageMeta(string name = default, DateTime built = default, DateTime executed = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PackageMeta and cannot be null");
            }
            Name = name;
            Built = built;
            Executed = executed;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Built
        /// </summary>
        [DataMember(Name = "built", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Built { get; set; }

        /// <summary>
        /// Gets or Sets Executed
        /// </summary>
        [DataMember(Name = "executed", EmitDefaultValue = false)]
        public DateTime Executed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageMeta {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Built: ").Append(Built).Append("\n");
            sb.Append("  Executed: ").Append(Executed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PackageMeta);
        }

        /// <summary>
        /// Returns true if PackageMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Built == input.Built ||
                    (Built != null &&
                    Built.Equals(input.Built))
                ) && 
                (
                    Executed == input.Executed ||
                    (Executed != null &&
                    Executed.Equals(input.Executed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (Built != null)
                {
                    hashCode = hashCode * 59 + Built.GetHashCode();
                }
                if (Executed != null)
                {
                    hashCode = hashCode * 59 + Executed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
