/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Corner(x: float, y: float)
    /// </summary>
    [DataContract(Name = "Corner")]
    public partial class Corner : IEquatable<Corner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Corner" /> class.
        /// </summary>
        [JsonConstructor]
        protected Corner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Corner" /> class.
        /// </summary>
        /// <param name="x">x (required).</param>
        /// <param name="y">y (required).</param>
        public Corner(decimal x = default, decimal y = default)
        {
            X = x;
            Y = y;
        }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", IsRequired = true, EmitDefaultValue = true)]
        public decimal X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", IsRequired = true, EmitDefaultValue = true)]
        public decimal Y { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Corner {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Corner);
        }

        /// <summary>
        /// Returns true if Corner instances are equal
        /// </summary>
        /// <param name="input">Instance of Corner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Corner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    X == input.X ||
                    X.Equals(input.X)
                ) && 
                (
                    Y == input.Y ||
                    Y.Equals(input.Y)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + X.GetHashCode();
                hashCode = hashCode * 59 + Y.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
