/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ProjectRobotJoints(name: &#39;str&#39;, robot_id: &#39;str&#39;, joints: &#39;list[Joint]&#39;, is_valid: &#39;bool&#39; &#x3D; False, arm_id: &#39;Optional[str]&#39; &#x3D; None, end_effector_id: &#39;Optional[str]&#39; &#x3D; None, id: &#39;str&#39; &#x3D; &#39;&#39;)
    /// </summary>
    [DataContract(Name = "ProjectRobotJoints")]
    public partial class ProjectRobotJoints : IEquatable<ProjectRobotJoints>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectRobotJoints" /> class.
        /// </summary>
        [JsonConstructor]
        protected ProjectRobotJoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectRobotJoints" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="joints">joints (required).</param>
        /// <param name="isValid">isValid (default to false).</param>
        /// <param name="armId">armId.</param>
        /// <param name="endEffectorId">endEffectorId.</param>
        /// <param name="id">id (default to &quot;&quot;).</param>
        public ProjectRobotJoints(string name = default, string robotId = default, List<Joint> joints = default, bool isValid = false, string armId = default, string endEffectorId = default, string id = @"")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectRobotJoints and cannot be null");
            }
            Name = name;
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for ProjectRobotJoints and cannot be null");
            }
            RobotId = robotId;
            // to ensure "joints" is required (not null)
            if (joints == null)
            {
                throw new ArgumentNullException("joints is a required property for ProjectRobotJoints and cannot be null");
            }
            Joints = joints;
            IsValid = isValid;
            ArmId = armId;
            EndEffectorId = endEffectorId;
            // use default value if no "id" provided
            Id = id ?? @"";
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets Joints
        /// </summary>
        [DataMember(Name = "joints", IsRequired = true, EmitDefaultValue = true)]
        public List<Joint> Joints { get; set; }

        /// <summary>
        /// Gets or Sets IsValid
        /// </summary>
        [DataMember(Name = "is_valid", EmitDefaultValue = true)]
        public bool IsValid { get; set; }

        /// <summary>
        /// Gets or Sets ArmId
        /// </summary>
        [DataMember(Name = "arm_id", EmitDefaultValue = false)]
        public string ArmId { get; set; }

        /// <summary>
        /// Gets or Sets EndEffectorId
        /// </summary>
        [DataMember(Name = "end_effector_id", EmitDefaultValue = false)]
        public string EndEffectorId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectRobotJoints {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  Joints: ").Append(Joints).Append("\n");
            sb.Append("  IsValid: ").Append(IsValid).Append("\n");
            sb.Append("  ArmId: ").Append(ArmId).Append("\n");
            sb.Append("  EndEffectorId: ").Append(EndEffectorId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ProjectRobotJoints);
        }

        /// <summary>
        /// Returns true if ProjectRobotJoints instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectRobotJoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectRobotJoints input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    RobotId == input.RobotId ||
                    (RobotId != null &&
                    RobotId.Equals(input.RobotId))
                ) && 
                (
                    Joints == input.Joints ||
                    (Joints != null &&
                     input.Joints != null &&
                     Joints.SequenceEqual(input.Joints))
                ) && 
                (
                    IsValid == input.IsValid ||
                    IsValid.Equals(input.IsValid)
                ) && 
                (
                    ArmId == input.ArmId ||
                    (ArmId != null &&
                    ArmId.Equals(input.ArmId))
                ) && 
                (
                    EndEffectorId == input.EndEffectorId ||
                    (EndEffectorId != null &&
                    EndEffectorId.Equals(input.EndEffectorId))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (RobotId != null)
                {
                    hashCode = hashCode * 59 + RobotId.GetHashCode();
                }
                if (Joints != null)
                {
                    hashCode = hashCode * 59 + Joints.GetHashCode();
                }
                hashCode = hashCode * 59 + IsValid.GetHashCode();
                if (ArmId != null)
                {
                    hashCode = hashCode * 59 + ArmId.GetHashCode();
                }
                if (EndEffectorId != null)
                {
                    hashCode = hashCode * 59 + EndEffectorId.GetHashCode();
                }
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
