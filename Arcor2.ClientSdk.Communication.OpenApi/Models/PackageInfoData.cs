/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Data(package_id: str, package_name: str, scene: arcor2.data.common.Scene, project: arcor2.data.common.Project, collision_models: arcor2.data.object_type.CollisionModels &#x3D; &lt;factory&gt;)
    /// </summary>
    [DataContract(Name = "PackageInfoData")]
    public partial class PackageInfoData : IEquatable<PackageInfoData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageInfoData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PackageInfoData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageInfoData" /> class.
        /// </summary>
        /// <param name="packageId">packageId (required).</param>
        /// <param name="packageName">packageName (required).</param>
        /// <param name="scene">scene (required).</param>
        /// <param name="project">project (required).</param>
        /// <param name="collisionModels">collisionModels.</param>
        public PackageInfoData(string packageId = default(string), string packageName = default(string), Scene scene = default(Scene), Project project = default(Project), CollisionModels collisionModels = default(CollisionModels))
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new ArgumentNullException("packageId is a required property for PackageInfoData and cannot be null");
            }
            this.PackageId = packageId;
            // to ensure "packageName" is required (not null)
            if (packageName == null)
            {
                throw new ArgumentNullException("packageName is a required property for PackageInfoData and cannot be null");
            }
            this.PackageName = packageName;
            // to ensure "scene" is required (not null)
            if (scene == null)
            {
                throw new ArgumentNullException("scene is a required property for PackageInfoData and cannot be null");
            }
            this.Scene = scene;
            // to ensure "project" is required (not null)
            if (project == null)
            {
                throw new ArgumentNullException("project is a required property for PackageInfoData and cannot be null");
            }
            this.Project = project;
            this.CollisionModels = collisionModels;
        }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "package_id", IsRequired = true, EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// Gets or Sets PackageName
        /// </summary>
        [DataMember(Name = "package_name", IsRequired = true, EmitDefaultValue = true)]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or Sets Scene
        /// </summary>
        [DataMember(Name = "scene", IsRequired = true, EmitDefaultValue = true)]
        public Scene Scene { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name = "project", IsRequired = true, EmitDefaultValue = true)]
        public Project Project { get; set; }

        /// <summary>
        /// Gets or Sets CollisionModels
        /// </summary>
        [DataMember(Name = "collision_models", EmitDefaultValue = false)]
        public CollisionModels CollisionModels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageInfoData {\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  Scene: ").Append(Scene).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  CollisionModels: ").Append(CollisionModels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageInfoData);
        }

        /// <summary>
        /// Returns true if PackageInfoData instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageInfoData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageInfoData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && 
                (
                    this.PackageName == input.PackageName ||
                    (this.PackageName != null &&
                    this.PackageName.Equals(input.PackageName))
                ) && 
                (
                    this.Scene == input.Scene ||
                    (this.Scene != null &&
                    this.Scene.Equals(input.Scene))
                ) && 
                (
                    this.Project == input.Project ||
                    (this.Project != null &&
                    this.Project.Equals(input.Project))
                ) && 
                (
                    this.CollisionModels == input.CollisionModels ||
                    (this.CollisionModels != null &&
                    this.CollisionModels.Equals(input.CollisionModels))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PackageId != null)
                {
                    hashCode = (hashCode * 59) + this.PackageId.GetHashCode();
                }
                if (this.PackageName != null)
                {
                    hashCode = (hashCode * 59) + this.PackageName.GetHashCode();
                }
                if (this.Scene != null)
                {
                    hashCode = (hashCode * 59) + this.Scene.GetHashCode();
                }
                if (this.Project != null)
                {
                    hashCode = (hashCode * 59) + this.Project.GetHashCode();
                }
                if (this.CollisionModels != null)
                {
                    hashCode = (hashCode * 59) + this.CollisionModels.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
