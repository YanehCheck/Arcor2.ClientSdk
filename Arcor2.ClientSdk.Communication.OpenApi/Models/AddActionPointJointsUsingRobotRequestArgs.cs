/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(action_point_id: str, robot_id: str, name: str &#x3D; &#39;default&#39;, arm_id: Optional[str] &#x3D; None, end_effector_id: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "AddActionPointJointsUsingRobotRequestArgs")]
    public partial class AddActionPointJointsUsingRobotRequestArgs : IEquatable<AddActionPointJointsUsingRobotRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActionPointJointsUsingRobotRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddActionPointJointsUsingRobotRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActionPointJointsUsingRobotRequestArgs" /> class.
        /// </summary>
        /// <param name="actionPointId">actionPointId (required).</param>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="name">name (default to &quot;default&quot;).</param>
        /// <param name="armId">armId.</param>
        /// <param name="endEffectorId">endEffectorId.</param>
        public AddActionPointJointsUsingRobotRequestArgs(string actionPointId = default(string), string robotId = default(string), string name = @"default", string armId = default(string), string endEffectorId = default(string))
        {
            // to ensure "actionPointId" is required (not null)
            if (actionPointId == null)
            {
                throw new ArgumentNullException("actionPointId is a required property for AddActionPointJointsUsingRobotRequestArgs and cannot be null");
            }
            this.ActionPointId = actionPointId;
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for AddActionPointJointsUsingRobotRequestArgs and cannot be null");
            }
            this.RobotId = robotId;
            // use default value if no "name" provided
            this.Name = name ?? @"default";
            this.ArmId = armId;
            this.EndEffectorId = endEffectorId;
        }

        /// <summary>
        /// Gets or Sets ActionPointId
        /// </summary>
        [DataMember(Name = "action_point_id", IsRequired = true, EmitDefaultValue = true)]
        public string ActionPointId { get; set; }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ArmId
        /// </summary>
        [DataMember(Name = "arm_id", EmitDefaultValue = false)]
        public string ArmId { get; set; }

        /// <summary>
        /// Gets or Sets EndEffectorId
        /// </summary>
        [DataMember(Name = "end_effector_id", EmitDefaultValue = false)]
        public string EndEffectorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddActionPointJointsUsingRobotRequestArgs {\n");
            sb.Append("  ActionPointId: ").Append(ActionPointId).Append("\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArmId: ").Append(ArmId).Append("\n");
            sb.Append("  EndEffectorId: ").Append(EndEffectorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddActionPointJointsUsingRobotRequestArgs);
        }

        /// <summary>
        /// Returns true if AddActionPointJointsUsingRobotRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of AddActionPointJointsUsingRobotRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddActionPointJointsUsingRobotRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionPointId == input.ActionPointId ||
                    (this.ActionPointId != null &&
                    this.ActionPointId.Equals(input.ActionPointId))
                ) && 
                (
                    this.RobotId == input.RobotId ||
                    (this.RobotId != null &&
                    this.RobotId.Equals(input.RobotId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ArmId == input.ArmId ||
                    (this.ArmId != null &&
                    this.ArmId.Equals(input.ArmId))
                ) && 
                (
                    this.EndEffectorId == input.EndEffectorId ||
                    (this.EndEffectorId != null &&
                    this.EndEffectorId.Equals(input.EndEffectorId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionPointId != null)
                {
                    hashCode = (hashCode * 59) + this.ActionPointId.GetHashCode();
                }
                if (this.RobotId != null)
                {
                    hashCode = (hashCode * 59) + this.RobotId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ArmId != null)
                {
                    hashCode = (hashCode * 59) + this.ArmId.GetHashCode();
                }
                if (this.EndEffectorId != null)
                {
                    hashCode = (hashCode * 59) + this.EndEffectorId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
