/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ProjectFunction(name: &#39;str&#39;, actions: &#39;list[Action]&#39; &#x3D; &lt;factory&gt;, logic: &#39;list[LogicItem]&#39; &#x3D; &lt;factory&gt;, parameters: &#39;list[ActionParameter]&#39; &#x3D; &lt;factory&gt;, returns: &#39;list[FunctionReturns]&#39; &#x3D; &lt;factory&gt;, id: &#39;str&#39; &#x3D; &#39;&#39;)
    /// </summary>
    [DataContract(Name = "ProjectFunction")]
    public partial class ProjectFunction : IEquatable<ProjectFunction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFunction" /> class.
        /// </summary>
        [JsonConstructor]
        protected ProjectFunction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectFunction" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="actions">actions.</param>
        /// <param name="logic">logic.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="returns">returns.</param>
        /// <param name="id">id (default to &quot;&quot;).</param>
        public ProjectFunction(string name = default, List<Action> actions = default, List<LogicItem> logic = default, List<ActionParameter> parameters = default, List<FunctionReturns> returns = default, string id = @"")
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ProjectFunction and cannot be null");
            }
            Name = name;
            Actions = actions;
            Logic = logic;
            Parameters = parameters;
            Returns = returns;
            // use default value if no "id" provided
            Id = id ?? @"";
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<Action> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Logic
        /// </summary>
        [DataMember(Name = "logic", EmitDefaultValue = false)]
        public List<LogicItem> Logic { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<ActionParameter> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Returns
        /// </summary>
        [DataMember(Name = "returns", EmitDefaultValue = false)]
        public List<FunctionReturns> Returns { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProjectFunction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Logic: ").Append(Logic).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Returns: ").Append(Returns).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ProjectFunction);
        }

        /// <summary>
        /// Returns true if ProjectFunction instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectFunction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectFunction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Actions == input.Actions ||
                    (Actions != null &&
                     input.Actions != null &&
                     Actions.SequenceEqual(input.Actions))
                ) && 
                (
                    Logic == input.Logic ||
                    (Logic != null &&
                     input.Logic != null &&
                     Logic.SequenceEqual(input.Logic))
                ) && 
                (
                    Parameters == input.Parameters ||
                    (Parameters != null &&
                     input.Parameters != null &&
                     Parameters.SequenceEqual(input.Parameters))
                ) && 
                (
                    Returns == input.Returns ||
                    (Returns != null &&
                     input.Returns != null &&
                     Returns.SequenceEqual(input.Returns))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (Actions != null)
                {
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                }
                if (Logic != null)
                {
                    hashCode = hashCode * 59 + Logic.GetHashCode();
                }
                if (Parameters != null)
                {
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                }
                if (Returns != null)
                {
                    hashCode = hashCode * 59 + Returns.GetHashCode();
                }
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
