/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(object_type_id: str, object_model: arcor2.data.object_type.ObjectModel)
    /// </summary>
    [DataContract(Name = "UpdateObjectModelRequestArgs")]
    public partial class UpdateObjectModelRequestArgs : IEquatable<UpdateObjectModelRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateObjectModelRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateObjectModelRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateObjectModelRequestArgs" /> class.
        /// </summary>
        /// <param name="objectTypeId">Object or service id. (required).</param>
        /// <param name="objectModel">objectModel (required).</param>
        public UpdateObjectModelRequestArgs(string objectTypeId = default(string), ObjectModel objectModel = default(ObjectModel))
        {
            // to ensure "objectTypeId" is required (not null)
            if (objectTypeId == null)
            {
                throw new ArgumentNullException("objectTypeId is a required property for UpdateObjectModelRequestArgs and cannot be null");
            }
            this.ObjectTypeId = objectTypeId;
            // to ensure "objectModel" is required (not null)
            if (objectModel == null)
            {
                throw new ArgumentNullException("objectModel is a required property for UpdateObjectModelRequestArgs and cannot be null");
            }
            this.ObjectModel = objectModel;
        }

        /// <summary>
        /// Object or service id.
        /// </summary>
        /// <value>Object or service id.</value>
        [DataMember(Name = "object_type_id", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectTypeId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectModel
        /// </summary>
        [DataMember(Name = "object_model", IsRequired = true, EmitDefaultValue = true)]
        public ObjectModel ObjectModel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateObjectModelRequestArgs {\n");
            sb.Append("  ObjectTypeId: ").Append(ObjectTypeId).Append("\n");
            sb.Append("  ObjectModel: ").Append(ObjectModel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateObjectModelRequestArgs);
        }

        /// <summary>
        /// Returns true if UpdateObjectModelRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateObjectModelRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateObjectModelRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ObjectTypeId == input.ObjectTypeId ||
                    (this.ObjectTypeId != null &&
                    this.ObjectTypeId.Equals(input.ObjectTypeId))
                ) && 
                (
                    this.ObjectModel == input.ObjectModel ||
                    (this.ObjectModel != null &&
                    this.ObjectModel.Equals(input.ObjectModel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectTypeId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectTypeId.GetHashCode();
                }
                if (this.ObjectModel != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectModel.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
