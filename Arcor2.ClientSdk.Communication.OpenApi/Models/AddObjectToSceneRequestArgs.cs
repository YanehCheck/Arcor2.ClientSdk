/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(name: str, type: str, pose: Optional[arcor2.data.common.Pose] &#x3D; None, parameters: list[arcor2.data.common.Parameter] &#x3D; &lt;factory&gt;)
    /// </summary>
    [DataContract(Name = "AddObjectToSceneRequestArgs")]
    public partial class AddObjectToSceneRequestArgs : IEquatable<AddObjectToSceneRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddObjectToSceneRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected AddObjectToSceneRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddObjectToSceneRequestArgs" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="pose">pose.</param>
        /// <param name="parameters">parameters.</param>
        public AddObjectToSceneRequestArgs(string name = default, string type = default, Pose pose = default, List<Parameter> parameters = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AddObjectToSceneRequestArgs and cannot be null");
            }
            Name = name;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AddObjectToSceneRequestArgs and cannot be null");
            }
            Type = type;
            Pose = pose;
            Parameters = parameters;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Pose
        /// </summary>
        [DataMember(Name = "pose", EmitDefaultValue = false)]
        public Pose Pose { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<Parameter> Parameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddObjectToSceneRequestArgs {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Pose: ").Append(Pose).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AddObjectToSceneRequestArgs);
        }

        /// <summary>
        /// Returns true if AddObjectToSceneRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of AddObjectToSceneRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddObjectToSceneRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Pose == input.Pose ||
                    (Pose != null &&
                    Pose.Equals(input.Pose))
                ) && 
                (
                    Parameters == input.Parameters ||
                    (Parameters != null &&
                     input.Parameters != null &&
                     Parameters.SequenceEqual(input.Parameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }
                if (Pose != null)
                {
                    hashCode = hashCode * 59 + Pose.GetHashCode();
                }
                if (Parameters != null)
                {
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
