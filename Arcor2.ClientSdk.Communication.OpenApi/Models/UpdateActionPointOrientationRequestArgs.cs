/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(orientation_id: str, orientation: arcor2.data.common.Orientation)
    /// </summary>
    [DataContract(Name = "UpdateActionPointOrientationRequestArgs")]
    public partial class UpdateActionPointOrientationRequestArgs : IEquatable<UpdateActionPointOrientationRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateActionPointOrientationRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected UpdateActionPointOrientationRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateActionPointOrientationRequestArgs" /> class.
        /// </summary>
        /// <param name="orientationId">orientationId (required).</param>
        /// <param name="orientation">orientation (required).</param>
        public UpdateActionPointOrientationRequestArgs(string orientationId = default(string), Orientation orientation = default(Orientation))
        {
            // to ensure "orientationId" is required (not null)
            if (orientationId == null)
            {
                throw new ArgumentNullException("orientationId is a required property for UpdateActionPointOrientationRequestArgs and cannot be null");
            }
            this.OrientationId = orientationId;
            // to ensure "orientation" is required (not null)
            if (orientation == null)
            {
                throw new ArgumentNullException("orientation is a required property for UpdateActionPointOrientationRequestArgs and cannot be null");
            }
            this.Orientation = orientation;
        }

        /// <summary>
        /// Gets or Sets OrientationId
        /// </summary>
        [DataMember(Name = "orientation_id", IsRequired = true, EmitDefaultValue = true)]
        public string OrientationId { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", IsRequired = true, EmitDefaultValue = true)]
        public Orientation Orientation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateActionPointOrientationRequestArgs {\n");
            sb.Append("  OrientationId: ").Append(OrientationId).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateActionPointOrientationRequestArgs);
        }

        /// <summary>
        /// Returns true if UpdateActionPointOrientationRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateActionPointOrientationRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateActionPointOrientationRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OrientationId == input.OrientationId ||
                    (this.OrientationId != null &&
                    this.OrientationId.Equals(input.OrientationId))
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    (this.Orientation != null &&
                    this.Orientation.Equals(input.Orientation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrientationId != null)
                {
                    hashCode = (hashCode * 59) + this.OrientationId.GetHashCode();
                }
                if (this.Orientation != null)
                {
                    hashCode = (hashCode * 59) + this.Orientation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
