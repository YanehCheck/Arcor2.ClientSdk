/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Orientation(x: &#39;float&#39; &#x3D; 0.0, y: &#39;float&#39; &#x3D; 0.0, z: &#39;float&#39; &#x3D; 0.0, w: &#39;float&#39; &#x3D; 1.0)
    /// </summary>
    [DataContract(Name = "Orientation")]
    public partial class Orientation : IEquatable<Orientation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Orientation" /> class.
        /// </summary>
        /// <param name="x">x (default to 0.0M).</param>
        /// <param name="y">y (default to 0.0M).</param>
        /// <param name="z">z (default to 0.0M).</param>
        /// <param name="w">w (default to 1.0M).</param>
        public Orientation(decimal x = 0.0M, decimal y = 0.0M, decimal z = 0.0M, decimal w = 1.0M)
        {
            X = x;
            Y = y;
            Z = z;
            W = w;
        }

        /// <summary>
        /// Gets or Sets X
        /// </summary>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public decimal X { get; set; }

        /// <summary>
        /// Gets or Sets Y
        /// </summary>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public decimal Y { get; set; }

        /// <summary>
        /// Gets or Sets Z
        /// </summary>
        [DataMember(Name = "z", EmitDefaultValue = false)]
        public decimal Z { get; set; }

        /// <summary>
        /// Gets or Sets W
        /// </summary>
        [DataMember(Name = "w", EmitDefaultValue = false)]
        public decimal W { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Orientation {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Z: ").Append(Z).Append("\n");
            sb.Append("  W: ").Append(W).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Orientation);
        }

        /// <summary>
        /// Returns true if Orientation instances are equal
        /// </summary>
        /// <param name="input">Instance of Orientation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Orientation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    X == input.X ||
                    X.Equals(input.X)
                ) && 
                (
                    Y == input.Y ||
                    Y.Equals(input.Y)
                ) && 
                (
                    Z == input.Z ||
                    Z.Equals(input.Z)
                ) && 
                (
                    W == input.W ||
                    W.Equals(input.W)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + X.GetHashCode();
                hashCode = hashCode * 59 + Y.GetHashCode();
                hashCode = hashCode * 59 + Z.GetHashCode();
                hashCode = hashCode * 59 + W.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
