/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(robot_id: str, end_effector_id: str, pose: arcor2.data.common.Pose, start_joints: Optional[list[arcor2.data.common.Joint]] &#x3D; None, avoid_collisions: bool &#x3D; True, arm_id: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "InverseKinematicsRequestArgs")]
    public partial class InverseKinematicsRequestArgs : IEquatable<InverseKinematicsRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InverseKinematicsRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected InverseKinematicsRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InverseKinematicsRequestArgs" /> class.
        /// </summary>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="endEffectorId">endEffectorId (required).</param>
        /// <param name="pose">pose (required).</param>
        /// <param name="startJoints">startJoints.</param>
        /// <param name="avoidCollisions">avoidCollisions (default to true).</param>
        /// <param name="armId">armId.</param>
        public InverseKinematicsRequestArgs(string robotId = default, string endEffectorId = default, Pose pose = default, List<Joint> startJoints = default, bool avoidCollisions = true, string armId = default)
        {
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for InverseKinematicsRequestArgs and cannot be null");
            }
            RobotId = robotId;
            // to ensure "endEffectorId" is required (not null)
            if (endEffectorId == null)
            {
                throw new ArgumentNullException("endEffectorId is a required property for InverseKinematicsRequestArgs and cannot be null");
            }
            EndEffectorId = endEffectorId;
            // to ensure "pose" is required (not null)
            if (pose == null)
            {
                throw new ArgumentNullException("pose is a required property for InverseKinematicsRequestArgs and cannot be null");
            }
            Pose = pose;
            StartJoints = startJoints;
            AvoidCollisions = avoidCollisions;
            ArmId = armId;
        }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets EndEffectorId
        /// </summary>
        [DataMember(Name = "end_effector_id", IsRequired = true, EmitDefaultValue = true)]
        public string EndEffectorId { get; set; }

        /// <summary>
        /// Gets or Sets Pose
        /// </summary>
        [DataMember(Name = "pose", IsRequired = true, EmitDefaultValue = true)]
        public Pose Pose { get; set; }

        /// <summary>
        /// Gets or Sets StartJoints
        /// </summary>
        [DataMember(Name = "start_joints", EmitDefaultValue = false)]
        public List<Joint> StartJoints { get; set; }

        /// <summary>
        /// Gets or Sets AvoidCollisions
        /// </summary>
        [DataMember(Name = "avoid_collisions", EmitDefaultValue = true)]
        public bool AvoidCollisions { get; set; }

        /// <summary>
        /// Gets or Sets ArmId
        /// </summary>
        [DataMember(Name = "arm_id", EmitDefaultValue = false)]
        public string ArmId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InverseKinematicsRequestArgs {\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  EndEffectorId: ").Append(EndEffectorId).Append("\n");
            sb.Append("  Pose: ").Append(Pose).Append("\n");
            sb.Append("  StartJoints: ").Append(StartJoints).Append("\n");
            sb.Append("  AvoidCollisions: ").Append(AvoidCollisions).Append("\n");
            sb.Append("  ArmId: ").Append(ArmId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InverseKinematicsRequestArgs);
        }

        /// <summary>
        /// Returns true if InverseKinematicsRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of InverseKinematicsRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InverseKinematicsRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    RobotId == input.RobotId ||
                    (RobotId != null &&
                    RobotId.Equals(input.RobotId))
                ) && 
                (
                    EndEffectorId == input.EndEffectorId ||
                    (EndEffectorId != null &&
                    EndEffectorId.Equals(input.EndEffectorId))
                ) && 
                (
                    Pose == input.Pose ||
                    (Pose != null &&
                    Pose.Equals(input.Pose))
                ) && 
                (
                    StartJoints == input.StartJoints ||
                    (StartJoints != null &&
                     input.StartJoints != null &&
                     StartJoints.SequenceEqual(input.StartJoints))
                ) && 
                (
                    AvoidCollisions == input.AvoidCollisions ||
                    AvoidCollisions.Equals(input.AvoidCollisions)
                ) && 
                (
                    ArmId == input.ArmId ||
                    (ArmId != null &&
                    ArmId.Equals(input.ArmId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (RobotId != null)
                {
                    hashCode = hashCode * 59 + RobotId.GetHashCode();
                }
                if (EndEffectorId != null)
                {
                    hashCode = hashCode * 59 + EndEffectorId.GetHashCode();
                }
                if (Pose != null)
                {
                    hashCode = hashCode * 59 + Pose.GetHashCode();
                }
                if (StartJoints != null)
                {
                    hashCode = hashCode * 59 + StartJoints.GetHashCode();
                }
                hashCode = hashCode * 59 + AvoidCollisions.GetHashCode();
                if (ArmId != null)
                {
                    hashCode = hashCode * 59 + ArmId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
