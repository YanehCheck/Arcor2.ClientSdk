/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ObjectAction(name: str, description: Optional[str] &#x3D; None, parameters: list[arcor2.data.object_type.ParameterMeta] &#x3D; &lt;factory&gt;, meta: arcor2.data.common.ActionMetadata &#x3D; &lt;factory&gt;, origins: Optional[str] &#x3D; None, returns: list[str] &#x3D; &lt;factory&gt;, disabled: bool &#x3D; False, problem: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "ObjectAction")]
    public partial class ObjectAction : IEquatable<ObjectAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectAction" /> class.
        /// </summary>
        [JsonConstructor]
        protected ObjectAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectAction" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="description">description.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="meta">meta.</param>
        /// <param name="origins">origins.</param>
        /// <param name="returns">returns.</param>
        /// <param name="disabled">disabled (default to false).</param>
        /// <param name="problem">problem.</param>
        public ObjectAction(string name = default, string description = default, List<ParameterMeta> parameters = default, ActionMetadata meta = default, string origins = default, List<string> returns = default, bool disabled = false, string problem = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ObjectAction and cannot be null");
            }
            Name = name;
            Description = description;
            Parameters = parameters;
            Meta = meta;
            Origins = origins;
            Returns = returns;
            Disabled = disabled;
            Problem = problem;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name = "parameters", EmitDefaultValue = false)]
        public List<ParameterMeta> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        public ActionMetadata Meta { get; set; }

        /// <summary>
        /// Gets or Sets Origins
        /// </summary>
        [DataMember(Name = "origins", EmitDefaultValue = false)]
        public string Origins { get; set; }

        /// <summary>
        /// Gets or Sets Returns
        /// </summary>
        [DataMember(Name = "returns", EmitDefaultValue = false)]
        public List<string> Returns { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Problem
        /// </summary>
        [DataMember(Name = "problem", EmitDefaultValue = false)]
        public string Problem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectAction {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("  Returns: ").Append(Returns).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ObjectAction);
        }

        /// <summary>
        /// Returns true if ObjectAction instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    Parameters == input.Parameters ||
                    (Parameters != null &&
                     input.Parameters != null &&
                     Parameters.SequenceEqual(input.Parameters))
                ) && 
                (
                    Meta == input.Meta ||
                    (Meta != null &&
                    Meta.Equals(input.Meta))
                ) && 
                (
                    Origins == input.Origins ||
                    (Origins != null &&
                    Origins.Equals(input.Origins))
                ) && 
                (
                    Returns == input.Returns ||
                    (Returns != null &&
                     input.Returns != null &&
                     Returns.SequenceEqual(input.Returns))
                ) && 
                (
                    Disabled == input.Disabled ||
                    Disabled.Equals(input.Disabled)
                ) && 
                (
                    Problem == input.Problem ||
                    (Problem != null &&
                    Problem.Equals(input.Problem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }
                if (Description != null)
                {
                    hashCode = hashCode * 59 + Description.GetHashCode();
                }
                if (Parameters != null)
                {
                    hashCode = hashCode * 59 + Parameters.GetHashCode();
                }
                if (Meta != null)
                {
                    hashCode = hashCode * 59 + Meta.GetHashCode();
                }
                if (Origins != null)
                {
                    hashCode = hashCode * 59 + Origins.GetHashCode();
                }
                if (Returns != null)
                {
                    hashCode = hashCode * 59 + Returns.GetHashCode();
                }
                hashCode = hashCode * 59 + Disabled.GetHashCode();
                if (Problem != null)
                {
                    hashCode = hashCode * 59 + Problem.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
