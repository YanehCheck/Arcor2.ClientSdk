/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// LogicItem(start: &#39;str&#39;, end: &#39;str&#39;, condition: &#39;Optional[ProjectLogicIf]&#39; &#x3D; None, id: &#39;str&#39; &#x3D; &#39;&#39;)
    /// </summary>
    [DataContract(Name = "LogicItem")]
    public partial class LogicItem : IEquatable<LogicItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LogicItem" /> class.
        /// </summary>
        [JsonConstructor]
        protected LogicItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LogicItem" /> class.
        /// </summary>
        /// <param name="start">start (required).</param>
        /// <param name="end">end (required).</param>
        /// <param name="condition">condition.</param>
        /// <param name="id">id (default to &quot;&quot;).</param>
        public LogicItem(string start = default, string end = default, ProjectLogicIf condition = default, string id = @"")
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new ArgumentNullException("start is a required property for LogicItem and cannot be null");
            }
            Start = start;
            // to ensure "end" is required (not null)
            if (end == null)
            {
                throw new ArgumentNullException("end is a required property for LogicItem and cannot be null");
            }
            End = end;
            Condition = condition;
            // use default value if no "id" provided
            Id = id ?? @"";
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public string Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", IsRequired = true, EmitDefaultValue = true)]
        public string End { get; set; }

        /// <summary>
        /// Gets or Sets Condition
        /// </summary>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public ProjectLogicIf Condition { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LogicItem {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LogicItem);
        }

        /// <summary>
        /// Returns true if LogicItem instances are equal
        /// </summary>
        /// <param name="input">Instance of LogicItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LogicItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Start == input.Start ||
                    (Start != null &&
                    Start.Equals(input.Start))
                ) && 
                (
                    End == input.End ||
                    (End != null &&
                    End.Equals(input.End))
                ) && 
                (
                    Condition == input.Condition ||
                    (Condition != null &&
                    Condition.Equals(input.Condition))
                ) && 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Start != null)
                {
                    hashCode = hashCode * 59 + Start.GetHashCode();
                }
                if (End != null)
                {
                    hashCode = hashCode * 59 + End.GetHashCode();
                }
                if (Condition != null)
                {
                    hashCode = hashCode * 59 + Condition.GetHashCode();
                }
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
