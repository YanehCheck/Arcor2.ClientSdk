/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(robot_id: str, end_effector_id: str, axis: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.Axis, what: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.What, mode: arcor2_arserver_data.rpc.robot.StepRobotEef.Request.Args.Mode, step: float, safe: bool &#x3D; True, pose: Optional[arcor2.data.common.Pose] &#x3D; None, speed: float &#x3D; 0.25, linear: bool &#x3D; True, arm_id: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "StepRobotEefRequestArgs")]
    public partial class StepRobotEefRequestArgs : IEquatable<StepRobotEefRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Defines Axis
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AxisEnum
        {
            /// <summary>
            /// Enum X for value: x
            /// </summary>
            [EnumMember(Value = "x")]
            X = 1,

            /// <summary>
            /// Enum Y for value: y
            /// </summary>
            [EnumMember(Value = "y")]
            Y = 2,

            /// <summary>
            /// Enum Z for value: z
            /// </summary>
            [EnumMember(Value = "z")]
            Z = 3
        }


        /// <summary>
        /// Gets or Sets Axis
        /// </summary>
        [DataMember(Name = "axis", IsRequired = true, EmitDefaultValue = true)]
        public AxisEnum Axis { get; set; }
        /// <summary>
        /// Defines What
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WhatEnum
        {
            /// <summary>
            /// Enum Position for value: position
            /// </summary>
            [EnumMember(Value = "position")]
            Position = 1,

            /// <summary>
            /// Enum Orientation for value: orientation
            /// </summary>
            [EnumMember(Value = "orientation")]
            Orientation = 2
        }


        /// <summary>
        /// Gets or Sets What
        /// </summary>
        [DataMember(Name = "what", IsRequired = true, EmitDefaultValue = true)]
        public WhatEnum What { get; set; }
        /// <summary>
        /// Defines Mode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ModeEnum
        {
            /// <summary>
            /// Enum World for value: world
            /// </summary>
            [EnumMember(Value = "world")]
            World = 1,

            /// <summary>
            /// Enum Robot for value: robot
            /// </summary>
            [EnumMember(Value = "robot")]
            Robot = 2,

            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 3,

            /// <summary>
            /// Enum Relative for value: relative
            /// </summary>
            [EnumMember(Value = "relative")]
            Relative = 4
        }


        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public ModeEnum Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StepRobotEefRequestArgs" /> class.
        /// </summary>
        [JsonConstructor]
        protected StepRobotEefRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StepRobotEefRequestArgs" /> class.
        /// </summary>
        /// <param name="robotId">robotId (required).</param>
        /// <param name="endEffectorId">endEffectorId (required).</param>
        /// <param name="axis">axis (required).</param>
        /// <param name="what">what (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="step">step (required).</param>
        /// <param name="safe">safe (default to true).</param>
        /// <param name="pose">pose.</param>
        /// <param name="speed">speed (default to 0.25M).</param>
        /// <param name="linear">linear (default to true).</param>
        /// <param name="armId">armId.</param>
        public StepRobotEefRequestArgs(string robotId = default(string), string endEffectorId = default(string), AxisEnum axis = default(AxisEnum), WhatEnum what = default(WhatEnum), ModeEnum mode = default(ModeEnum), decimal step = default(decimal), bool safe = true, Pose pose = default(Pose), decimal speed = 0.25M, bool linear = true, string armId = default(string))
        {
            // to ensure "robotId" is required (not null)
            if (robotId == null)
            {
                throw new ArgumentNullException("robotId is a required property for StepRobotEefRequestArgs and cannot be null");
            }
            this.RobotId = robotId;
            // to ensure "endEffectorId" is required (not null)
            if (endEffectorId == null)
            {
                throw new ArgumentNullException("endEffectorId is a required property for StepRobotEefRequestArgs and cannot be null");
            }
            this.EndEffectorId = endEffectorId;
            this.Axis = axis;
            this.What = what;
            this.Mode = mode;
            this.Step = step;
            this.Safe = safe;
            this.Pose = pose;
            this.Speed = speed;
            this.Linear = linear;
            this.ArmId = armId;
        }

        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name = "robot_id", IsRequired = true, EmitDefaultValue = true)]
        public string RobotId { get; set; }

        /// <summary>
        /// Gets or Sets EndEffectorId
        /// </summary>
        [DataMember(Name = "end_effector_id", IsRequired = true, EmitDefaultValue = true)]
        public string EndEffectorId { get; set; }

        /// <summary>
        /// Gets or Sets Step
        /// </summary>
        [DataMember(Name = "step", IsRequired = true, EmitDefaultValue = true)]
        public decimal Step { get; set; }

        /// <summary>
        /// Gets or Sets Safe
        /// </summary>
        [DataMember(Name = "safe", EmitDefaultValue = true)]
        public bool Safe { get; set; }

        /// <summary>
        /// Gets or Sets Pose
        /// </summary>
        [DataMember(Name = "pose", EmitDefaultValue = false)]
        public Pose Pose { get; set; }

        /// <summary>
        /// Gets or Sets Speed
        /// </summary>
        [DataMember(Name = "speed", EmitDefaultValue = false)]
        public decimal Speed { get; set; }

        /// <summary>
        /// Gets or Sets Linear
        /// </summary>
        [DataMember(Name = "linear", EmitDefaultValue = true)]
        public bool Linear { get; set; }

        /// <summary>
        /// Gets or Sets ArmId
        /// </summary>
        [DataMember(Name = "arm_id", EmitDefaultValue = false)]
        public string ArmId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StepRobotEefRequestArgs {\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  EndEffectorId: ").Append(EndEffectorId).Append("\n");
            sb.Append("  Axis: ").Append(Axis).Append("\n");
            sb.Append("  What: ").Append(What).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Step: ").Append(Step).Append("\n");
            sb.Append("  Safe: ").Append(Safe).Append("\n");
            sb.Append("  Pose: ").Append(Pose).Append("\n");
            sb.Append("  Speed: ").Append(Speed).Append("\n");
            sb.Append("  Linear: ").Append(Linear).Append("\n");
            sb.Append("  ArmId: ").Append(ArmId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StepRobotEefRequestArgs);
        }

        /// <summary>
        /// Returns true if StepRobotEefRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of StepRobotEefRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StepRobotEefRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RobotId == input.RobotId ||
                    (this.RobotId != null &&
                    this.RobotId.Equals(input.RobotId))
                ) && 
                (
                    this.EndEffectorId == input.EndEffectorId ||
                    (this.EndEffectorId != null &&
                    this.EndEffectorId.Equals(input.EndEffectorId))
                ) && 
                (
                    this.Axis == input.Axis ||
                    this.Axis.Equals(input.Axis)
                ) && 
                (
                    this.What == input.What ||
                    this.What.Equals(input.What)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.Step == input.Step ||
                    this.Step.Equals(input.Step)
                ) && 
                (
                    this.Safe == input.Safe ||
                    this.Safe.Equals(input.Safe)
                ) && 
                (
                    this.Pose == input.Pose ||
                    (this.Pose != null &&
                    this.Pose.Equals(input.Pose))
                ) && 
                (
                    this.Speed == input.Speed ||
                    this.Speed.Equals(input.Speed)
                ) && 
                (
                    this.Linear == input.Linear ||
                    this.Linear.Equals(input.Linear)
                ) && 
                (
                    this.ArmId == input.ArmId ||
                    (this.ArmId != null &&
                    this.ArmId.Equals(input.ArmId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RobotId != null)
                {
                    hashCode = (hashCode * 59) + this.RobotId.GetHashCode();
                }
                if (this.EndEffectorId != null)
                {
                    hashCode = (hashCode * 59) + this.EndEffectorId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Axis.GetHashCode();
                hashCode = (hashCode * 59) + this.What.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                hashCode = (hashCode * 59) + this.Step.GetHashCode();
                hashCode = (hashCode * 59) + this.Safe.GetHashCode();
                if (this.Pose != null)
                {
                    hashCode = (hashCode * 59) + this.Pose.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Speed.GetHashCode();
                hashCode = (hashCode * 59) + this.Linear.GetHashCode();
                if (this.ArmId != null)
                {
                    hashCode = (hashCode * 59) + this.ArmId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
