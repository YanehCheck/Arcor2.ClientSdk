/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(id: str, robot: arcor2.data.rpc.common.RobotArg, pivot: arcor2_arserver_data.rpc.objects.UpdateObjectPoseUsingRobot.Request.Args.PivotEnum &#x3D; &lt;PivotEnum.MIDDLE: &#39;middle&#39;&gt;)
    /// </summary>
    [DataContract(Name = "UpdateObjectPoseUsingRobotRequestArgs")]
    public partial class UpdateObjectPoseUsingRobotRequestArgs : IEquatable<UpdateObjectPoseUsingRobotRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Defines Pivot
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PivotEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Middle for value: middle
            /// </summary>
            [EnumMember(Value = "middle")]
            Middle = 2,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 3
        }


        /// <summary>
        /// Gets or Sets Pivot
        /// </summary>
        [DataMember(Name = "pivot", EmitDefaultValue = false)]
        public PivotEnum? Pivot { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateObjectPoseUsingRobotRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateObjectPoseUsingRobotRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateObjectPoseUsingRobotRequestArgs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="robot">robot (required).</param>
        /// <param name="pivot">pivot (default to PivotEnum.Middle).</param>
        public UpdateObjectPoseUsingRobotRequestArgs(string id = default(string), RobotArg robot = default(RobotArg), PivotEnum? pivot = PivotEnum.Middle)
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for UpdateObjectPoseUsingRobotRequestArgs and cannot be null");
            }
            this.Id = id;
            // to ensure "robot" is required (not null)
            if (robot == null)
            {
                throw new ArgumentNullException("robot is a required property for UpdateObjectPoseUsingRobotRequestArgs and cannot be null");
            }
            this.Robot = robot;
            this.Pivot = pivot;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Robot
        /// </summary>
        [DataMember(Name = "robot", IsRequired = true, EmitDefaultValue = true)]
        public RobotArg Robot { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateObjectPoseUsingRobotRequestArgs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Robot: ").Append(Robot).Append("\n");
            sb.Append("  Pivot: ").Append(Pivot).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateObjectPoseUsingRobotRequestArgs);
        }

        /// <summary>
        /// Returns true if UpdateObjectPoseUsingRobotRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateObjectPoseUsingRobotRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateObjectPoseUsingRobotRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Robot == input.Robot ||
                    (this.Robot != null &&
                    this.Robot.Equals(input.Robot))
                ) && 
                (
                    this.Pivot == input.Pivot ||
                    this.Pivot.Equals(input.Pivot)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Robot != null)
                {
                    hashCode = (hashCode * 59) + this.Robot.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Pivot.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
