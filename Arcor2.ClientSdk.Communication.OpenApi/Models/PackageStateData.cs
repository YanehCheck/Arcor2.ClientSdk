/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Data(state: arcor2.data.events.PackageState.Data.StateEnum &#x3D; &lt;StateEnum.UNDEFINED: &#39;undefined&#39;&gt;, package_id: Optional[str] &#x3D; None)
    /// </summary>
    [DataContract(Name = "PackageStateData")]
    public partial class PackageStateData : IEquatable<PackageStateData>, IValidatableObject
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Running for value: running
            /// </summary>
            [EnumMember(Value = "running")]
            Running = 1,

            /// <summary>
            /// Enum Stopping for value: stopping
            /// </summary>
            [EnumMember(Value = "stopping")]
            Stopping = 2,

            /// <summary>
            /// Enum Stopped for value: stopped
            /// </summary>
            [EnumMember(Value = "stopped")]
            Stopped = 3,

            /// <summary>
            /// Enum Pausing for value: pausing
            /// </summary>
            [EnumMember(Value = "pausing")]
            Pausing = 4,

            /// <summary>
            /// Enum Paused for value: paused
            /// </summary>
            [EnumMember(Value = "paused")]
            Paused = 5,

            /// <summary>
            /// Enum Resuming for value: resuming
            /// </summary>
            [EnumMember(Value = "resuming")]
            Resuming = 6,

            /// <summary>
            /// Enum Undefined for value: undefined
            /// </summary>
            [EnumMember(Value = "undefined")]
            Undefined = 7
        }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageStateData" /> class.
        /// </summary>
        /// <param name="state">state (default to StateEnum.Undefined).</param>
        /// <param name="packageId">packageId.</param>
        public PackageStateData(StateEnum? state = StateEnum.Undefined, string packageId = default)
        {
            State = state;
            PackageId = packageId;
        }

        /// <summary>
        /// Gets or Sets PackageId
        /// </summary>
        [DataMember(Name = "package_id", EmitDefaultValue = false)]
        public string PackageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PackageStateData {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PackageStateData);
        }

        /// <summary>
        /// Returns true if PackageStateData instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageStateData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageStateData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    State == input.State ||
                    State.Equals(input.State)
                ) && 
                (
                    PackageId == input.PackageId ||
                    (PackageId != null &&
                    PackageId.Equals(input.PackageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + State.GetHashCode();
                if (PackageId != null)
                {
                    hashCode = hashCode * 59 + PackageId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
