/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(scene_id: str, name: str, description: str &#x3D; &lt;factory&gt;, has_logic: bool &#x3D; True)
    /// </summary>
    [DataContract(Name = "NewProjectRequestArgs")]
    public partial class NewProjectRequestArgs : IEquatable<NewProjectRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProjectRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NewProjectRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NewProjectRequestArgs" /> class.
        /// </summary>
        /// <param name="sceneId">sceneId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (default to &quot;&quot;).</param>
        /// <param name="hasLogic">hasLogic (default to true).</param>
        public NewProjectRequestArgs(string sceneId = default(string), string name = default(string), string description = @"", bool hasLogic = true)
        {
            // to ensure "sceneId" is required (not null)
            if (sceneId == null)
            {
                throw new ArgumentNullException("sceneId is a required property for NewProjectRequestArgs and cannot be null");
            }
            this.SceneId = sceneId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for NewProjectRequestArgs and cannot be null");
            }
            this.Name = name;
            // use default value if no "description" provided
            this.Description = description ?? @"";
            this.HasLogic = hasLogic;
        }

        /// <summary>
        /// Gets or Sets SceneId
        /// </summary>
        [DataMember(Name = "scene_id", IsRequired = true, EmitDefaultValue = true)]
        public string SceneId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HasLogic
        /// </summary>
        [DataMember(Name = "has_logic", EmitDefaultValue = true)]
        public bool HasLogic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NewProjectRequestArgs {\n");
            sb.Append("  SceneId: ").Append(SceneId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasLogic: ").Append(HasLogic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NewProjectRequestArgs);
        }

        /// <summary>
        /// Returns true if NewProjectRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of NewProjectRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NewProjectRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SceneId == input.SceneId ||
                    (this.SceneId != null &&
                    this.SceneId.Equals(input.SceneId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.HasLogic == input.HasLogic ||
                    this.HasLogic.Equals(input.HasLogic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SceneId != null)
                {
                    hashCode = (hashCode * 59) + this.SceneId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasLogic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
