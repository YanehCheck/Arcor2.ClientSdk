/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Robot meta that could be extracted without creating an instance.
    /// </summary>
    [DataContract(Name = "RobotMeta")]
    public partial class RobotMeta : IEquatable<RobotMeta>, IValidatableObject
    {
        /// <summary>
        /// Defines RobotType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RobotTypeEnum
        {
            /// <summary>
            /// Enum Articulated for value: articulated
            /// </summary>
            [EnumMember(Value = "articulated")]
            Articulated = 1,

            /// <summary>
            /// Enum Cartesian for value: cartesian
            /// </summary>
            [EnumMember(Value = "cartesian")]
            Cartesian = 2,

            /// <summary>
            /// Enum Scara for value: scara
            /// </summary>
            [EnumMember(Value = "scara")]
            Scara = 3
        }


        /// <summary>
        /// Gets or Sets RobotType
        /// </summary>
        [DataMember(Name = "robot_type", IsRequired = true, EmitDefaultValue = true)]
        public RobotTypeEnum RobotType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotMeta" /> class.
        /// </summary>
        [JsonConstructor]
        protected RobotMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RobotMeta" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="robotType">robotType (required).</param>
        /// <param name="multiArm">multiArm (default to false).</param>
        /// <param name="features">features.</param>
        /// <param name="urdfPackageFilename">urdfPackageFilename.</param>
        public RobotMeta(string type = default, RobotTypeEnum robotType = default, bool multiArm = false, RobotFeatures features = default, string urdfPackageFilename = default)
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for RobotMeta and cannot be null");
            }
            Type = type;
            RobotType = robotType;
            MultiArm = multiArm;
            Features = features;
            UrdfPackageFilename = urdfPackageFilename;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets MultiArm
        /// </summary>
        [DataMember(Name = "multi_arm", EmitDefaultValue = true)]
        public bool MultiArm { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", EmitDefaultValue = false)]
        public RobotFeatures Features { get; set; }

        /// <summary>
        /// Gets or Sets UrdfPackageFilename
        /// </summary>
        [DataMember(Name = "urdf_package_filename", EmitDefaultValue = false)]
        public string UrdfPackageFilename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RobotMeta {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RobotType: ").Append(RobotType).Append("\n");
            sb.Append("  MultiArm: ").Append(MultiArm).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  UrdfPackageFilename: ").Append(UrdfPackageFilename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as RobotMeta);
        }

        /// <summary>
        /// Returns true if RobotMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of RobotMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RobotMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    RobotType == input.RobotType ||
                    RobotType.Equals(input.RobotType)
                ) && 
                (
                    MultiArm == input.MultiArm ||
                    MultiArm.Equals(input.MultiArm)
                ) && 
                (
                    Features == input.Features ||
                    (Features != null &&
                    Features.Equals(input.Features))
                ) && 
                (
                    UrdfPackageFilename == input.UrdfPackageFilename ||
                    (UrdfPackageFilename != null &&
                    UrdfPackageFilename.Equals(input.UrdfPackageFilename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }
                hashCode = hashCode * 59 + RobotType.GetHashCode();
                hashCode = hashCode * 59 + MultiArm.GetHashCode();
                if (Features != null)
                {
                    hashCode = hashCode * 59 + Features.GetHashCode();
                }
                if (UrdfPackageFilename != null)
                {
                    hashCode = hashCode * 59 + UrdfPackageFilename.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
