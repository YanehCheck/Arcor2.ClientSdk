/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// ActionMetadata(composite: &#39;bool&#39; &#x3D; False, hidden: &#39;bool&#39; &#x3D; False)
    /// </summary>
    [DataContract(Name = "ActionMetadata")]
    public partial class ActionMetadata : IEquatable<ActionMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionMetadata" /> class.
        /// </summary>
        /// <param name="composite">Should be set for nested actions. (default to false).</param>
        /// <param name="hidden">When set, action will be hidden in UIs. (default to false).</param>
        /// <param name="cancellable">Defines whether action execution can be cancelled. (default to false).</param>
        public ActionMetadata(bool composite = false, bool hidden = false, bool cancellable = false)
        {
            this.Composite = composite;
            this.Hidden = hidden;
            this.Cancellable = cancellable;
        }

        /// <summary>
        /// Should be set for nested actions.
        /// </summary>
        /// <value>Should be set for nested actions.</value>
        [DataMember(Name = "composite", EmitDefaultValue = true)]
        public bool Composite { get; set; }

        /// <summary>
        /// When set, action will be hidden in UIs.
        /// </summary>
        /// <value>When set, action will be hidden in UIs.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Defines whether action execution can be cancelled.
        /// </summary>
        /// <value>Defines whether action execution can be cancelled.</value>
        [DataMember(Name = "cancellable", EmitDefaultValue = true)]
        public bool Cancellable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionMetadata {\n");
            sb.Append("  Composite: ").Append(Composite).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("  Cancellable: ").Append(Cancellable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionMetadata);
        }

        /// <summary>
        /// Returns true if ActionMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Composite == input.Composite ||
                    this.Composite.Equals(input.Composite)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                ) && 
                (
                    this.Cancellable == input.Cancellable ||
                    this.Cancellable.Equals(input.Cancellable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Composite.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                hashCode = (hashCode * 59) + this.Cancellable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
