/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Args(object_id: str, lock_tree: bool &#x3D; False)
    /// </summary>
    [DataContract(Name = "WriteLockRequestArgs")]
    public partial class WriteLockRequestArgs : IEquatable<WriteLockRequestArgs>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WriteLockRequestArgs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WriteLockRequestArgs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WriteLockRequestArgs" /> class.
        /// </summary>
        /// <param name="objectId">objectId (required).</param>
        /// <param name="lockTree">lockTree (default to false).</param>
        public WriteLockRequestArgs(string objectId = default(string), bool lockTree = false)
        {
            // to ensure "objectId" is required (not null)
            if (objectId == null)
            {
                throw new ArgumentNullException("objectId is a required property for WriteLockRequestArgs and cannot be null");
            }
            this.ObjectId = objectId;
            this.LockTree = lockTree;
        }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "object_id", IsRequired = true, EmitDefaultValue = true)]
        public string ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets LockTree
        /// </summary>
        [DataMember(Name = "lock_tree", EmitDefaultValue = true)]
        public bool LockTree { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WriteLockRequestArgs {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  LockTree: ").Append(LockTree).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WriteLockRequestArgs);
        }

        /// <summary>
        /// Returns true if WriteLockRequestArgs instances are equal
        /// </summary>
        /// <param name="input">Instance of WriteLockRequestArgs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WriteLockRequestArgs input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.LockTree == input.LockTree ||
                    this.LockTree.Equals(input.LockTree)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LockTree.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
