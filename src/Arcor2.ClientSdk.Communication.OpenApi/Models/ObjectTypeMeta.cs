/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// Metadata about object type, as it is used in server API.
    /// </summary>
    [DataContract(Name = "ObjectTypeMeta")]
    public partial class ObjectTypeMeta : IEquatable<ObjectTypeMeta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeMeta" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ObjectTypeMeta() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectTypeMeta" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="description">description (default to &quot;&quot;).</param>
        /// <param name="builtIn">builtIn (default to false).</param>
        /// <param name="varBase">varBase (default to &quot;&quot;).</param>
        /// <param name="objectModel">objectModel.</param>
        /// <param name="needsParentType">needsParentType.</param>
        /// <param name="hasPose">hasPose (default to false).</param>
        /// <param name="varAbstract">varAbstract (default to false).</param>
        /// <param name="disabled">disabled (default to false).</param>
        /// <param name="problem">problem.</param>
        /// <param name="settings">settings.</param>
        /// <param name="modified">modified.</param>
        public ObjectTypeMeta(string type = default(string), string description = @"", bool builtIn = false, string varBase = @"", ObjectModel objectModel = default(ObjectModel), string needsParentType = default(string), bool hasPose = false, bool varAbstract = false, bool disabled = false, string problem = default(string), List<ParameterMeta> settings = default(List<ParameterMeta>), DateTime modified = default(DateTime))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for ObjectTypeMeta and cannot be null");
            }
            this.Type = type;
            // use default value if no "description" provided
            this.Description = description ?? @"";
            this.BuiltIn = builtIn;
            // use default value if no "varBase" provided
            this.Base = varBase ?? @"";
            this.ObjectModel = objectModel;
            this.NeedsParentType = needsParentType;
            this.HasPose = hasPose;
            this.Abstract = varAbstract;
            this.Disabled = disabled;
            this.Problem = problem;
            this.Settings = settings;
            this.Modified = modified;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets BuiltIn
        /// </summary>
        [DataMember(Name = "built_in", EmitDefaultValue = true)]
        public bool BuiltIn { get; set; }

        /// <summary>
        /// Gets or Sets Base
        /// </summary>
        [DataMember(Name = "base", EmitDefaultValue = false)]
        public string Base { get; set; }

        /// <summary>
        /// Gets or Sets ObjectModel
        /// </summary>
        [DataMember(Name = "object_model", EmitDefaultValue = false)]
        public ObjectModel ObjectModel { get; set; }

        /// <summary>
        /// Gets or Sets NeedsParentType
        /// </summary>
        [DataMember(Name = "needs_parent_type", EmitDefaultValue = false)]
        public string NeedsParentType { get; set; }

        /// <summary>
        /// Gets or Sets HasPose
        /// </summary>
        [DataMember(Name = "has_pose", EmitDefaultValue = true)]
        public bool HasPose { get; set; }

        /// <summary>
        /// Gets or Sets Abstract
        /// </summary>
        [DataMember(Name = "abstract", EmitDefaultValue = true)]
        public bool Abstract { get; set; }

        /// <summary>
        /// Gets or Sets Disabled
        /// </summary>
        [DataMember(Name = "disabled", EmitDefaultValue = true)]
        public bool Disabled { get; set; }

        /// <summary>
        /// Gets or Sets Problem
        /// </summary>
        [DataMember(Name = "problem", EmitDefaultValue = false)]
        public string Problem { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public List<ParameterMeta> Settings { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name = "modified", EmitDefaultValue = false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectTypeMeta {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BuiltIn: ").Append(BuiltIn).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  ObjectModel: ").Append(ObjectModel).Append("\n");
            sb.Append("  NeedsParentType: ").Append(NeedsParentType).Append("\n");
            sb.Append("  HasPose: ").Append(HasPose).Append("\n");
            sb.Append("  Abstract: ").Append(Abstract).Append("\n");
            sb.Append("  Disabled: ").Append(Disabled).Append("\n");
            sb.Append("  Problem: ").Append(Problem).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectTypeMeta);
        }

        /// <summary>
        /// Returns true if ObjectTypeMeta instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectTypeMeta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectTypeMeta input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.BuiltIn == input.BuiltIn ||
                    this.BuiltIn.Equals(input.BuiltIn)
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.ObjectModel == input.ObjectModel ||
                    (this.ObjectModel != null &&
                    this.ObjectModel.Equals(input.ObjectModel))
                ) && 
                (
                    this.NeedsParentType == input.NeedsParentType ||
                    (this.NeedsParentType != null &&
                    this.NeedsParentType.Equals(input.NeedsParentType))
                ) && 
                (
                    this.HasPose == input.HasPose ||
                    this.HasPose.Equals(input.HasPose)
                ) && 
                (
                    this.Abstract == input.Abstract ||
                    this.Abstract.Equals(input.Abstract)
                ) && 
                (
                    this.Disabled == input.Disabled ||
                    this.Disabled.Equals(input.Disabled)
                ) && 
                (
                    this.Problem == input.Problem ||
                    (this.Problem != null &&
                    this.Problem.Equals(input.Problem))
                ) && 
                (
                    this.Settings == input.Settings ||
                    this.Settings != null &&
                    input.Settings != null &&
                    this.Settings.SequenceEqual(input.Settings)
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuiltIn.GetHashCode();
                if (this.Base != null)
                {
                    hashCode = (hashCode * 59) + this.Base.GetHashCode();
                }
                if (this.ObjectModel != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectModel.GetHashCode();
                }
                if (this.NeedsParentType != null)
                {
                    hashCode = (hashCode * 59) + this.NeedsParentType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HasPose.GetHashCode();
                hashCode = (hashCode * 59) + this.Abstract.GetHashCode();
                hashCode = (hashCode * 59) + this.Disabled.GetHashCode();
                if (this.Problem != null)
                {
                    hashCode = (hashCode * 59) + this.Problem.GetHashCode();
                }
                if (this.Settings != null)
                {
                    hashCode = (hashCode * 59) + this.Settings.GetHashCode();
                }
                if (this.Modified != null)
                {
                    hashCode = (hashCode * 59) + this.Modified.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
