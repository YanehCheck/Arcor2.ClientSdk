/*
 * ARCOR2 ARServer Data Models
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace Arcor2.ClientSdk.Communication.OpenApi.Models
{
    /// <summary>
    /// MarkerCorners(marker_id: int, corners: list[arcor2_calibration_data.Corner])
    /// </summary>
    [DataContract(Name = "MarkerCorners")]
    public partial class MarkerCorners : IEquatable<MarkerCorners>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkerCorners" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarkerCorners() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarkerCorners" /> class.
        /// </summary>
        /// <param name="markerId">markerId (required).</param>
        /// <param name="corners">corners (required).</param>
        public MarkerCorners(int markerId = default(int), List<Corner> corners = default(List<Corner>))
        {
            this.MarkerId = markerId;
            // to ensure "corners" is required (not null)
            if (corners == null)
            {
                throw new ArgumentNullException("corners is a required property for MarkerCorners and cannot be null");
            }
            this.Corners = corners;
        }

        /// <summary>
        /// Gets or Sets MarkerId
        /// </summary>
        [DataMember(Name = "marker_id", IsRequired = true, EmitDefaultValue = true)]
        public int MarkerId { get; set; }

        /// <summary>
        /// Gets or Sets Corners
        /// </summary>
        [DataMember(Name = "corners", IsRequired = true, EmitDefaultValue = true)]
        public List<Corner> Corners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MarkerCorners {\n");
            sb.Append("  MarkerId: ").Append(MarkerId).Append("\n");
            sb.Append("  Corners: ").Append(Corners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarkerCorners);
        }

        /// <summary>
        /// Returns true if MarkerCorners instances are equal
        /// </summary>
        /// <param name="input">Instance of MarkerCorners to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarkerCorners input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarkerId == input.MarkerId ||
                    this.MarkerId.Equals(input.MarkerId)
                ) && 
                (
                    this.Corners == input.Corners ||
                    this.Corners != null &&
                    input.Corners != null &&
                    this.Corners.SequenceEqual(input.Corners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MarkerId.GetHashCode();
                if (this.Corners != null)
                {
                    hashCode = (hashCode * 59) + this.Corners.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
